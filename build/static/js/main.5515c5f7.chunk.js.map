{"version":3,"sources":["inputComponents.js","App.js","serviceWorker.js","index.js"],"names":["InputComponents","useState","cityNames","setCityNames","classes","makeStyles","theme","grow","flexGrow","title","display","breakpoints","up","sectionDesktop","useStyles","className","AppBar","postion","Toolbar","Typography","variant","nowrap","style","marginTop","Box","md","label","group","type","value","onChange","e","target","outline","color","onClick","a","city","fetch","method","headers","body","JSON","stringify","response","ok","console","log","window","open","far","icon","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2UAgGeA,MAvFf,WAA4B,IAAD,EAEOC,mBAAS,IAFhB,mBAEpBC,EAFoB,KAETC,EAFS,KAuBrBC,EAnBYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAS,GAGXC,MAAM,aACJC,QAAQ,QACPJ,EAAMK,YAAYC,GAAG,MAAO,CAC3BF,QAAQ,UAGZG,eAAe,aACbH,QAAQ,QACPJ,EAAMK,YAAYC,GAAG,MAAO,CAC3BF,QAAQ,YAKEI,GAEd,OACE,yBAAKC,UAAU,OACf,yBAAKA,UAAaX,EAAQG,MAC1B,kBAACS,EAAA,EAAD,CAAQC,QAAQ,YAChB,kBAACC,EAAA,EAAD,KAEE,kBAACC,EAAA,EAAD,CAAYJ,UAAaX,EAAQK,MAAOW,QAAU,KAAKC,QAAM,GAA7D,wBAMF,yBAAKC,MAAO,CAACC,UAAW,SACxB,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,KACA,kBAAC,IAAD,MACE,kBAAC,IAAD,KACA,kBAAC,IAAD,MACE,kBAAC,IAAD,CAAQC,GAAK,KACX,8BACE,uBAAGV,UAAU,oBAAb,kEACA,yBAAKA,UAAU,aAEb,kBAAC,IAAD,CAAUW,MAAM,aAAaC,OAAK,EAACC,KAAK,OAAOC,MAAS3B,EAAW4B,SAAU,SAAAC,GAAC,OAAI5B,EAAa4B,EAAEC,OAAOH,UACxG,uBAAGd,UAAU,oBAAb,sCACA,kBAAC,IAAD,CAAUW,MAAM,0BAA0BC,OAAK,EAACC,KAAK,SACrD,uBAAGb,UAAU,oBAAb,kCAGF,yBAAKA,UAAU,eACb,kBAAC,IAAD,CAAQkB,SAAO,EAACC,MAAM,OAAOC,QAAO,sBAAI,8BAAAC,EAAA,6DAChCC,EAAO,CAACnC,aADwB,SAEfoC,MAAM,WAAY,CACvCC,OAAQ,OACRC,QAAQ,CACN,eAAe,oBAEjBC,KAAMC,KAAKC,UAAUN,KAPe,QAEhCO,EAFgC,QAUvBC,KACXC,QAAQC,IAAIH,GACZE,QAAQC,IAAI,YACZC,OAAOC,KAAK,WAAY,WAbU,4CAAxC,SAiBE,kBAAC,IAAD,CAASC,KAAG,EAACC,KAAK,cAAcpC,UAAU,aAKlD,kBAAC,IAAD,YCvEGqC,MAXf,WAGE,OAEE,yBAAKrC,UAAY,OACb,kBAAC,EAAD,QCEYsC,QACW,cAA7BL,OAAOM,SAASC,UAEe,UAA7BP,OAAOM,SAASC,UAEhBP,OAAOM,SAASC,SAASC,MACvB,2D,kBCRNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.5515c5f7.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn, MDBIcon, MDBInput } from 'mdbreact';\nimport {Box} from '@material-ui/core';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\n\n\nfunction InputComponents() {\n\nconst [cityNames, setCityNames] = useState(\"\");\n\nconst useStyles = makeStyles(theme => ({\n  grow: {\n    flexGrow:1\n  },\n\n  title:{\n    display:'none',\n    [theme.breakpoints.up('sm')]:{\n      display:'block',\n    },\n  },\n  sectionDesktop:{\n    display:'none',\n    [theme.breakpoints.up('md')]:{\n      display:'flex',\n    },\n  },\n}));\n\nconst classes = useStyles();\n\n  return (\n    <div className=\"App\">\n    <div className = {classes.grow}>\n    <AppBar postion=\"relative\">\n    <Toolbar>\n\n      <Typography className = {classes.title} variant = \"h5\" nowrap>\n        Where did you go?\n      </Typography>\n    </Toolbar>\n    </AppBar>\n    </div>\n    <div style={{marginTop: \"90px\"}}>\n    <Box>\n        <MDBContainer>\n        <MDBRow></MDBRow>\n          <MDBRow>\n          <MDBCol></MDBCol>\n            <MDBCol md = \"6\">\n              <form>\n                <p className=\"text-center mb-4\">Your map will open in a new tab. Right Click and save as html.</p>\n                <div className=\"grey-text\">\n\n                  <MDBInput label=\"City Names\" group type=\"text\" value = {cityNames} onChange={e => setCityNames(e.target.value)} />\n                  <p className=\"text-center mb-4\">Seperate the city names with comma</p>\n                  <MDBInput label=\"Dates (not implemented)\" group type=\"text\" />\n                  <p className=\"text-center mb-4\">Seperate the dates with comma</p>\n\n                </div>\n                <div className=\"text-center\">\n                  <MDBBtn outline color=\"blue\" onClick = {async () => {\n                    const city = {cityNames};\n                    const response = await fetch('/getCity', {\n                      method: 'POST',\n                      headers:{\n                        'Content-Type':'application/json'\n                      },\n                      body: JSON.stringify(city)\n                    })\n\n                      if (response.ok){\n                        console.log(response);\n                        console.log(\"response\");\n                        window.open(\"map.html\", \"_blank\");\n                      }\n                  }}>\n                    Submit\n                    <MDBIcon far icon=\"paper-plane\" className=\"ml-1\" />\n                  </MDBBtn>\n                </div>\n              </form>\n            </MDBCol>\n            <MDBCol></MDBCol>\n          </MDBRow>\n        </MDBContainer>\n        </Box>\n        </div>\n      </div>\n\n  );\n}\n\nexport default InputComponents;\n","import React from 'react';\nimport InputComponents from './inputComponents.js';\n\n\nfunction App() {\n\n\n  return (\n\n    <div className = \"App\">\n        <InputComponents />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}